/******************************************************************************
 *                      rhc_media - Mario no Gourmetrace                      *
 *                       Copyright (C) 2020  devwizard                        *
 *        This project is licensed under the terms of the GNU General         *
 *        Public License version 2.  See LICENSE for more information.        *
 ******************************************************************************/

#include <ultra64.h>
#include <gbi_ext.h>
#include <sm64.h>

.globl s_game
s_game:
    s_read_szp(0x04, object_player)
    s_read_szp(0x03, object_entity)
    s_read_scr(0x17, object_player)
    s_read_scr(0x16, object_entity)
    s_read_scr(0x13, object)
    s_compile_start()
        s_g_scr(0x01, 0x17002DD4)
        s_g_scr(0x96, 0x17000038)
        s_g_scr(0x95, 0x170001BC)
        s_g_scr(0xA8, 0x17000000)
        s_g_scr(0xA5, 0x1700009C)
        s_g_scr(0xA6, 0x17000124)
        s_g_scr(0xA7, 0x17000230)
        s_g_scr(0xA3, 0x17000168)
        s_g_scr(0x74, 0x1600013C)
        s_g_scr(0x7A, 0x16000EA0)
        s_g_scr(0x79, 0x16000F6C)
        s_g_scr(0x7C, 0x16000FB4)
        s_g_gfx(0xA4, 0x04032A18, SPRITE)
        s_g_scr(0x90, 0x16000B2C)
        s_g_scr(0x91, 0x16000B8C)
        s_g_scr(0x94, 0x17000084)
        s_g_scr(0xA2, 0x16000C8C)
        s_g_scr(0xAA, 0x1700001C)
        s_g_scr(0xB9, 0x16000C44)
        s_g_scr(0xBA, 0x16000BEC)
        s_g_scr(0x8F, 0x17000284)
        s_g_gfx(0x9F, 0x0302BCD0, SPRITE)
        s_g_scr(0xBB, 0x160000A8)
        s_g_scr(0x9C, 0x17000084)
        s_g_gfx(0xA1, 0x0301CB00, SPRITE)
        s_g_scr(0x8E, 0x16000000)
        s_g_scr(0xE0, 0x16000020)
        s_g_gfx(0x9E, 0x0302C8A0, SPRITE)
        s_g_scr(0xA0, 0x16000F98)
        s_g_scr(0x75, 0x160001A0)
        s_g_scr(0x76, 0x16000200)
        s_g_scr(0x77, 0x16000264)
        s_g_scr(0x85, 0x16000DA8)
        s_g_scr(0x86, 0x16000CF0)
        s_g_scr(0x87, 0x16000D3C)
        s_g_scr(0x88, 0x16000CA4)
        s_g_scr(0x88, 0x16000CA4)
        s_g_scr(0xC8, 0x16000AB0)
        s_g_scr(0xCC, 0x16000A84)
        s_g_scr(0xCB, 0x16000B10)
        s_g_scr(0xD4, 0x16000E84)
        s_g_scr(0xD7, 0x160002C4)
        s_g_scr(0xD8, 0x16000328)
        s_g_scr(0xDB, 0x16000E14)
        s_g_scr(0xCD, 0x16000040)
        s_g_scr(0x8A, 0x16000ED4)
        s_g_scr(0x8B, 0x16000F24)
    s_compile_end()
    s_callback(game_save_init, 0)
    s_do()
        s_callback(game_menu_init, 0)
        s_call(stage)
        s_sleep(1)
    s_while(GT, 0)
    s_sjump(0x14, menu)

stage:
    s_read(STAGE)
    s_cjump(EQ, 1, case_1)
    s_cjump(EQ, 2, case_2)
    s_cjump(EQ, 3, case_3)
    s_cjump(EQ, 4, case_4)
    s_return()
case_1: s_scall(0x0E, stage_course1); s_return()
case_2: s_scall(0x0E, stage_course2); s_return()
case_3: s_scall(0x0E, stage_course3); s_return()
case_4: s_scall(0x0E, stage_end);     s_return()
