#!/usr/bin/env python3

#                       rhc_media - Mario no Gourmetrace
#                        Copyright (C) 2020  devwizard
#         This project is licensed under the terms of the GNU General
#         Public License version 2.  See LICENSE for more information.

import sys
import os

def strlabel(s):
    mask = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz"
    s = "".join([c if c in mask else "_" for c in s.strip()])
    if s[0] in "0123456789":
        s = "_" + s
    return s

def rint(x):
    return int(round(x))

def rvec(v):
    return tuple([rint(x) for x in v])

def s16(x):
    return max(-0x8000, min(0x7FFF, rint(x)))

def vecs(v):
    return tuple([s16(x) for x in v])

def g_n(v):
    return tuple([max(-0x80, min(0x7F, rint(0x80*x))) for x in v])

def g_vtx(vtx_v, vtx_t, vtx_n, ss, st, ts, tt, v):
    vx, vy, vz = vecs(vtx_v[v[0]]) if v[0] != None else (0, 0, 0)
    if v[1] != None:
        s, t = vtx_t[v[1]]
        t = 1.0 - t
        s = s16(0x20 * (ts + ss*s))
        t = s16(0x20 * (tt + st*t))
    else:
        s, t = (0, 0)
    nx, ny, nz = g_n(vtx_n[v[2]]) if v[2] != None else (0, 0, 0)
    return vx, vy, vz, s, t, nx, ny, nz

def g_flush(vtx, gfx, buf, obj, vs):
    if len(buf[0]) > 0:
        gfx.append("gsSPVertex(&vtx_%s[%d], %2d, %2d),\n" % (
            obj, len(vtx), len(buf[0]), vs
        ))
    for i in range(0, len(buf[1]) & ~1, 2):
        v0, v1, v2 = buf[1][i+0]
        v3, v4, v5 = buf[1][i+1]
        gfx.append("gsSP2Triangles(%2d, %2d, %2d,  0, %2d, %2d, %2d,  0),\n" % (
            vs+v0, vs+v1, vs+v2, vs+v3, vs+v4, vs+v5
        ))
    if len(buf[1]) & 1:
        v0, v1, v2 = buf[1][-1]
        gfx.append("gsSP1Triangle(%2d, %2d, %2d,  0),\n" % (
            vs+v0, vs+v1, vs+v2
        ))
    vtx += buf[0]
    buf[0] = []
    buf[1] = []
    buf[2] = len(vtx)

def g_main(path, option, vtx_v, vtx_t, vtx_n, obj, shape_table):
    vtx_table = []
    for mtl, shape in shape_table:
        o = option[mtl if mtl in option else None]
        ss, st, ts, tt = o["t"]
        vs = int(o["r"][0])
        ve = int(o["r"][1])
        tri_table = [
            [g_vtx(vtx_v, vtx_t, vtx_n, ss, st, ts, tt, v) for v in t]
            for t in shape
        ]
        gfx_table = []
        buf = [[], [], 0]
        g_flush(vtx_table, gfx_table, buf, obj, vs)
        for tri in tri_table:
            cnt = ve-vs - 3
            for vtx in tri:
                if vtx in buf[0]:
                    cnt += 1
            if len(buf[0]) >= cnt:
                g_flush(vtx_table, gfx_table, buf, obj, vs)
            t = []
            for vtx in tri:
                if vtx in buf[0]:
                    t.append(buf[0].index(vtx))
                else:
                    t.append(len(buf[0]))
                    buf[0].append(vtx)
                buf[1].append(t)
        g_flush(vtx_table, gfx_table, buf, obj, vs)
        data = "".join(gfx_table)
        with open(os.path.join(path, "g_%s_%s.h" % (obj, mtl)), "w") as f:
            f.write(data)
    data = ("static const Vtx vtx_%s[] =\n{\n" % obj) + "".join([
        "    {{{%6d, %6d, %6d}, 0, {%6d, %6d}, {%4d, %4d, %4d, 0x00}}},\n"
        % vtx
        for vtx in vtx_table
    ]) + "};\n"
    with open(os.path.join(path, "g_%s_vtx.h" % obj), "w") as f:
        f.write(data)

def m_main(path, option, vtx_v, vtx_t, vtx_n, obj, shape_table):
    vtx_table = []
    for mtl, shape in shape_table:
        tri_table = []
        for t in shape:
            tri = [vecs(vtx_v[v[0]]) for v in t]
            t = []
            for vtx in tri:
                if vtx in vtx_table:
                    t.append(vtx_table.index(vtx))
                else:
                    t.append(len(vtx_table))
                    vtx_table.append(vtx)
            tri_table.append(tuple(t))
        data = ("%5d,\n" % len(tri_table)) + "".join([
            "%5d, %5d, %5d,\n" % tri for tri in tri_table
        ])
        with open(os.path.join(path, "m_%s_%s.h" % (obj, mtl)), "w") as f:
            f.write(data)
    data = ("0x0040, %5d,\n" % len(vtx_table)) + "".join([
        "%6d, %6d, %6d,\n" % vtx for vtx in vtx_table
    ])
    with open(os.path.join(path, "m_%s_vtx.h" % obj), "w") as f:
        f.write(data)

def p_main(path, option, vtx_v, vtx_t, vtx_n, obj, shape_table):
    vtx_table = []
    for mtl, shape in shape_table:
        for t in shape:
            for v in t:
                vtx = rvec(vtx_v[v[0]])
                if vtx not in vtx_table:
                    vtx_table.append(vtx)
    data = ("COUNT(%d)\n" % len(vtx_table)) + "".join([
        "POINT(%d, %d, %d)\n" % rvec(v) for v in vtx_table
    ])
    with open(os.path.join(path, "p_%s.h" % obj), "w") as f:
        f.write(data)

def b_main(path, option, vtx_v, vtx_t, vtx_n, obj, shape_table):
    vtx_table = []
    for mtl, shape in shape_table:
        for t in shape:
            for v in t:
                vtx = rvec(vtx_v[v[0]])
                if vtx not in vtx_table:
                    vtx_table.append(vtx)
    x = [v[0] for v in vtx_table]
    y = [v[1] for v in vtx_table]
    z = [v[2] for v in vtx_table]
    data = "BOUND(%d, %d, %d, %d, %d, %d)\n" % (
        min(x), max(x), min(y), max(y), min(z), max(z)
    )
    with open(os.path.join(path, "b_%s.h" % obj), "w") as f:
        f.write(data)

def main(argc, argv):
    if argc < 3:
        print(
            "usage: %s <output> <input> [option ...]\n"
            "    obj=<all>\n"
            "        -g -m -p -b\n"
            "        m=1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1\n"
            "    mtl=<all>\n"
            "        t=0,0,0,0\n"
            "        r=0,16" % argv[0]
        )
        return 1
    path = argv[1]
    fn   = argv[2]
    o = {
        "t": [0.0, 0.0, 0.0, 0.0],
        "r": [0.0, 16.0],
    }
    option = {
        None: o,
        "-g": False,
        "-m": False,
        "-p": False,
        "-b": False,
        "m": [
            1.0, 0.0, 0.0, 0.0,
            0.0, 1.0, 0.0, 0.0,
            0.0, 0.0, 1.0, 0.0,
            0.0, 0.0, 0.0, 1.0,
        ],
    }
    option_table = {None: option}
    for arg in argv[3:]:
        if arg.startswith("-"):
            option[arg] = True
        else:
            a, v = arg.split("=")
            if a == "obj":
                option_table[v] = option = option_table[None].copy()
                option[None] = o = option[None].copy()
            elif a == "mtl":
                option[v] = o = option[None].copy()
            else:
                v = [float(x) for x in v.split(",")]
                if a in option:
                    option[a] = v
                elif a in o:
                    o[a] = v
    with open(fn, "r") as f:
        data = f.read()
    vtx_data = {"v": [], "vt": [], "vn": []}
    shape_data = []
    shape = None
    obj = "obj"
    mtl = "mtl"
    for line in data.split("\n"):
        args = [s.strip() for s in line.split()]
        if len(args) == 0:
            continue
        elif args[0] in vtx_data:
            vtx_data[args[0]].append(tuple([float(a) for a in args[1:]]))
        elif args[0] in ("l", "f"):
            if shape == None:
                for o, shape_table in shape_data:
                    if o == obj:
                        break
                else:
                    shape_table = []
                    shape_data.append([obj, shape_table])
                for m, shape in shape_table:
                    if m == mtl:
                        break
                else:
                    shape = []
                    shape_table.append([mtl, shape])
            if args[0] == "l":
                shape.append(tuple([(int(i)-1, None, None) for i in args[1:]]))
            if args[0] == "f":
                face = [
                    tuple([
                        int(i)-1 if i != "" else None
                        for i in (vtx+"//").split("/")
                    ])[:3]
                    for vtx in args[1:]
                ]
                for i in range(len(face)-2):
                    shape.append((face[0], face[i+1], face[i+2]))
        elif args[0] == "o":
            obj = strlabel(args[1])
            shape = None
        elif args[0] == "usemtl":
            mtl = strlabel(args[1])
            shape = None
    for obj, shape_table in shape_data:
        option = option_table[obj if obj in option_table else None]
        m = [
            option["m"][ 0: 4],
            option["m"][ 4: 8],
            option["m"][ 8:12],
            option["m"][12:16],
        ]
        vtx_v = [
            (
                m[0][0]*x + m[1][0]*y + m[2][0]*z + m[3][0],
                m[0][1]*x + m[1][1]*y + m[2][1]*z + m[3][1],
                m[0][2]*x + m[1][2]*y + m[2][2]*z + m[3][2],
            )
            for x, y, z in vtx_data["v"]
        ]
        vtx_t = vtx_data["vt"]
        vtx_n = [
            (
                m[0][0]*x + m[1][0]*y + m[2][0]*z,
                m[0][1]*x + m[1][1]*y + m[2][1]*z,
                m[0][2]*x + m[1][2]*y + m[2][2]*z,
            )
            for x, y, z in vtx_data["vn"]
        ]
        if option["-g"]:
            g_main(path, option, vtx_v, vtx_t, vtx_n, obj, shape_table)
        if option["-m"]:
            m_main(path, option, vtx_v, vtx_t, vtx_n, obj, shape_table)
        if option["-p"]:
            p_main(path, option, vtx_v, vtx_t, vtx_n, obj, shape_table)
        if option["-b"]:
            b_main(path, option, vtx_v, vtx_t, vtx_n, obj, shape_table)
    return 0

if __name__ == "__main__":
    sys.exit(main(len(sys.argv), sys.argv))
